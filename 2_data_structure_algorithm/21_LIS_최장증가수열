# 최장 증가 수열 (LIS, Longest Increasing Subsequence)

<br>

## 최장 증가 수열 (LIS)란?
> 원소가 n개인 배열의 일부 원소를 골라내서 만든 부분 수열 중, 각 원소가 이전 원소보다
  크다는 조건을 만족하고, 그 길이가 최대인 부분 수열을 최장 증가 부분 수열이라고 합니다.

<br>
- 예시 1)
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdTXGdh%2FbtrW6pJ3gRV%2Fi42ghmOwyGiMh0lghwRrj1%2Fimg.png)

<br>
- 예시2)
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FNJydP%2FbtqDyMSpdCb%2F2DtvIYX4K1lOEj9AcL0PiK%2Fimg.png)
  - 위와 같은 길이가 8인 수열이 주어졌을때, 이 수열에서 증가하는 부분 수열을 뽑는다면 다음과 같이 여러 수열이 나온다.
  - 예를 들어, [2, 3] , [1, 3] , [2,5] , [2,3,5] , [1,3,5] ...
  - 그 중에서 가장 길이가 긴 수열은 [2,3,5,6,7] 이다
![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLCJDO%2FbtqDDwthCoN%2FZw3iyGPwYo1PLg3rqIOZG0%2Fimg.png)
  - [1,3,5,6,7]도 가장 길이가 긴 수열로 가능하다.
  - 이와 같이 LIS는 반드시 하나로 결정되는 것은 아니다. 따라서 수열을 구한다면 답이 여러 개가 될 수도 있다.

<br>
 ---
 ## 최장 증가 수열 특징

 - **장점**
    - 유용한 데이터 패턴 식별: 데이터에서 중요한 패턴을 식별하는 데 도움이 된다. 예를 들어 주식 가격 데이터에서 최장 증가 수열을 찾으면 주식 시장의 트렌드를 분석하는 데 도움이 될 수 있습니다.
    - 다양한 응용 분야: 최장 증가 수열은 데이터 마이닝, 생물 정보학, 금융 등 다양한 응용 분야에서 사용됩니다.

 - **단점**
    - 모든 가능한 부분 수열을 확인 요구: 최장증가수열을 찾기 위해서는 모든 가능한 부분 수열을 확인해야 하므로, 시간 복잡도가 O(n^2) 또는 O(n log n)이 될 수 있다.
    - 최적해를 보장하지 않음: 최장증가수열은 단 하나의 최적해를 보장하지 않습니다. 여러 개의 최장증가수열이 존재할 수 있습니다.

 - **사용 사례**
    - 주식 시장 분석: 주식의 가격 변동을 분석하여 특정 기간 동안의 최장 증가하는 추세를 찾아내는 데 사용될 수 있습니다.
    - 유전자 서열 분석: DNA나 RNA 서열에서 특정 부분 서열 중에서 가장 긴 증가하는 부분을 찾아내는 데 활용됩니다.
    - 네트워크 분석: 네트워크에서 연결된 노드 간의 관계를 분석하여 가장 긴 증가하는 부분 네트워크를 찾아내는 데 사용될 수 있습니다.

<br>

---

## 시간 복잡도

  - O($n^2$): DP 구현
  - O($logn$): 이분 탐색 구현

<br>

---

## 구현 방법:
  - **DP**:
  ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxGQTQ%2FbtrXcete2DA%2FDXiloyyufxzEPgYCoOD2k0%2Fimg.png)

  ```python
  def lis_dp(arr):
      n = len(arr)
      length = [1] * n

      for k in range(n):
          for i in range(k):
              if arr[i] < arr[k]:
                  length[k] = max(length[k], length[i] + 1)

      return max(length)
  ```
  - **이분 탐색**:
   ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FnY2va%2FbtrXg3ywIgu%2FaK8qmC1Ht0aBuEnkW7rhTK%2Fimg.png)
   ```python
   def lis_binary_search(arr):
       lis = [arr[0]]  # 가장 긴 증가하는 부분 수열. 가장 뒤에 있는 값은 부분 수열 중 가장 최댓값

       for i in range(1, len(arr)):
           if arr[i] > lis[-1]:
               lis.append(arr[i])
           else:
               low, high = 0, len(lis) - 1
               while low <= high:
                   mid = (low + high) // 2
                   if lis[mid] < arr[i]:
                       low = mid + 1
                   else:
                       high = mid - 1

               lis[low] = arr[i]

       return len(lis)
   ```

<br>

---

## 예상 질문

1. 최장증가수열(LIS)이 무엇인가요?
> 최장증가수열은 주어진 수열에서 원소들을 선택하여 증가하는 순서로 배열한 가장 긴 부분 수열을 찾는 알고리즘입니다. 여러 가지 버전이 있고, 동적 프로그래밍이나 이분 탐색과 같은 기법으로 구현할 수 있습니다.

2. 최장증가수열을 찾는 데 사용되는 동적 프로그래밍의 핵심 아이디어는 무엇인가요?
> 동적 프로그래밍에서는 중복 계산을 최소화하여 최적 부분 구조를 활용합니다. 최장증가수열의 경우, 현재 원소를 포함하는 LIS의 길이를 이전 원소들을 기반으로 계산하고, 그 중 최대값을 찾아나갑니다.

3. 이분 탐색을 사용하여 LIS를 찾는 이유는 무엇인가요?
> 이분 탐색을 사용하면 LIS를 구하는 동안에도 중간 결과를 저장하지 않아도 되어 메모리 사용량이 줄어듭니다. 또한, 이분 탐색을 통해 현재까지의 부분 수열 중 가능한 최소값을 유지하며, 새로운 원소가 추가될 때마다 이분 탐색을 통해 업데이트합니다.
